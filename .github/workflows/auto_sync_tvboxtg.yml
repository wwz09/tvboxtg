name: Auto-update TVBoxTG

on:
  schedule:
    - cron: "0 */2 * * *"
  workflow_dispatch:

permissions:
  contents: write
  actions: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Git
        run: |
          git config --global user.name "wwz09"
          git config --global user.email "wwz5124@gmail.com"

      - name: Check upstream repository accessibility
        run: |
          for i in {1..3}; do
            curl -s -o /dev/null -w "%{http_code}" "https://github.com/ls125781003/tvboxtg.git" && break
            echo "Attempt $i failed, retrying in 1 second..."
            sleep 1
          done
          
          curl_status=$(curl -s -o /dev/null -w "%{http_code}" "https://github.com/ls125781003/tvboxtg.git")
          if [[ ! $curl_status =~ ^(200|401)$ ]]; then
            echo "Upstream repository not reachable, status code: $curl_status"
            exit 1
          fi

      - name: Add upstream remote
        run: git remote add upstream "https://github.com/ls125781003/tvboxtg.git" || echo "Upstream remote already exists"

      - name: Fetch upstream
        run: git fetch upstream || (
          echo "Failed to fetch upstream, trying to re-add remote..."
          git remote remove upstream
          git remote add upstream "https://github.com/ls125781003/tvboxtg.git"
          git fetch upstream
        )

      - name: Merge upstream changes
        id: merge
        run: |
          git checkout main
          git merge --no-edit upstream/main || (
            echo "Conflicts detected, attempting automatic resolution..."
            git checkout --theirs .
            git add .
            git commit -m "Automatically resolve upstream sync conflicts $(date)"
            echo "Conflicts resolved, using upstream version to overwrite local files"
          )
          echo "Upstream code merge completed"

      - name: Detect changes
        id: check_changes
        run: |
          git status
          changes=$(git status --porcelain)
          if [[ -n "$changes" ]]; then
            echo "Detected changes:"
            echo "$changes"
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
            echo "Code changes detected, preparing to commit..."
          else
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
            echo "No code changes detected, no need to commit..."
          fi

      - name: Commit changes (if any)
        if: ${{ env.HAS_CHANGES == 'true' }}
        run: |
          git add .
          git commit -m "Automatically sync upstream repository changes $(date)" || (
            echo "Commit failed, checking for untracked files or permission issues"
            git status
            git commit -m "Automatically sync upstream repository changes $(date)" --allow-empty
          )

      - name: Push changes
        run: |
          git push origin main || (
            echo "Push failed, trying to pull latest code and retry..."
            git pull --rebase origin main
            git push origin main || (
              echo "Second push failed, trying again..."
              git pull --rebase origin main
              git push origin main
            )
          )

      - name: Trigger URL replacement workflow (if needed)
        if: ${{ env.HAS_CHANGES == 'true' }}
        run: |
          echo "Code changes detected, triggering URL replacement workflow..."
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"sync_upstream"}' || (
            echo "Failed to trigger URL replacement workflow, retrying later..."
            sleep 5
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/dispatches \
              -d '{"event_type":"sync_upstream"}' || (
              echo "Second trigger failed, recording error information"
              exit 0
            )
          )